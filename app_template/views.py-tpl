from rest_framework import viewsets, status
from rest_framework.response import Response
from rest_framework.views import APIView
from django.db import transaction
from drf_yasg.utils import swagger_auto_schema
from drf_yasg import openapi
from .models import {{ camel_case_app_name }}
from .serializers import {{ camel_case_app_name }}Serializer

class {{ camel_case_app_name }}ViewSet(viewsets.ModelViewSet):
    queryset = {{ camel_case_app_name }}.objects.all()
    serializer_class = {{ camel_case_app_name }}Serializer

    @swagger_auto_schema(
        operation_description="Retrieve a list of {{ camel_case_app_name }}s",
        responses={200: {{ camel_case_app_name }}Serializer(many=True)},
        tags=['{{ camel_case_app_name }}']
    )
    def list(self, request, *args, **kwargs):
        queryset = self.filter_queryset(self.get_queryset())
        page = self.paginate_queryset(queryset)
        if page is not None:
            serializer = self.get_serializer(page, many=True)
            return self.get_paginated_response(serializer.data)
        serializer = self.get_serializer(queryset, many=True)
        return Response(serializer.data)

    @swagger_auto_schema(
        operation_description="Retrieve a specific {{ camel_case_app_name }}",
        responses={200: {{ camel_case_app_name }}Serializer()},
        tags=['{{ camel_case_app_name }}']
    )
    def retrieve(self, request, *args, **kwargs):
        instance = self.get_object()
        serializer = self.get_serializer(instance)
        return Response(serializer.data)

    @swagger_auto_schema(
        operation_description="Create a new {{ camel_case_app_name }}",
        request_body={{ camel_case_app_name }}Serializer,
        responses={201: {{ camel_case_app_name }}Serializer()},
        tags=['{{ camel_case_app_name }}']
    )
    def create(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        self.perform_create(serializer)
        headers = self.get_success_headers(serializer.data)
        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)

    @swagger_auto_schema(
        operation_description="Update an existing {{ camel_case_app_name }}",
        request_body={{ camel_case_app_name }}Serializer,
        responses={200: {{ camel_case_app_name }}Serializer()},
        tags=['{{ camel_case_app_name }}']
    )
    def update(self, request, *args, **kwargs):
        partial = kwargs.pop('partial', False)
        instance = self.get_object()
        serializer = self.get_serializer(instance, data=request.data, partial=partial)
        serializer.is_valid(raise_exception=True)
        self.perform_update(serializer)
        return Response(serializer.data)

    @swagger_auto_schema(
        operation_description="Partially update an existing {{ camel_case_app_name }}",
        request_body={{ camel_case_app_name }}Serializer,
        responses={200: {{ camel_case_app_name }}Serializer()},
        tags=['{{ camel_case_app_name }}']
    )
    def partial_update(self, request, *args, **kwargs):
        kwargs['partial'] = True
        return self.update(request, *args, **kwargs)

    @swagger_auto_schema(
        operation_description="Delete a specific {{ camel_case_app_name }}",
        responses={204: 'No Content'},
        tags=['{{ camel_case_app_name }}']
    )
    def destroy(self, request, *args, **kwargs):
        instance = self.get_object()
        self.perform_destroy(instance)
        return Response(status=status.HTTP_204_NO_CONTENT)


class {{ camel_case_app_name }}BulkView(APIView):

    @swagger_auto_schema(
        operation_description="Create a new {{ camel_case_app_name }}",
        request_body={{ camel_case_app_name }}Serializer(many=True),
        responses={201: {{ camel_case_app_name }}Serializer()},
        tags=['{{ camel_case_app_name }}_Bulk']
    )
    def post(self, request):
        serializer = {{ camel_case_app_name }}Serializer(data=request.data, many=True)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    @swagger_auto_schema(
        operation_description="Update existing {{ camel_case_app_name }}s or create if not existing",
        request_body=openapi.Schema(
            type=openapi.TYPE_ARRAY,
            items=openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    'id': openapi.Schema(type=openapi.TYPE_INTEGER, description='{{ camel_case_app_name }} ID'),
                    '{{ app_name }}_name': openapi.Schema(type=openapi.TYPE_STRING, description='{{ camel_case_app_name }} Name')
                }
            )
        ),
        responses={200: '{{ camel_case_app_name }}s updated successfully'},
        tags=['{{ camel_case_app_name }}_Bulk']
    )
    def put(self, request):
        try:
            data = request.data
            with transaction.atomic():
                updated_list, created_list = [], []
                for item in data:
                    {{ camel_case_app_name }}, created = {{ camel_case_app_name }}.objects.update_or_create(
                        id=item.get('id'),
                        defaults={
                            '{{ camel_case_app_name }}_name': item.get('{{ camel_case_app_name }}_name'),
                        }
                    )
                    if created:
                        created_list.append({{ camel_case_app_name }}.id)
                    else:
                        updated_list.append({{ camel_case_app_name }}.id)
            return Response({'detail': '{{ camel_case_app_name }} updated successfully',
                            'updated': updated_list, 'created': created_list}, status=status.HTTP_200_OK)
        except Exception as e:
            return Response({'error': str(e)}, status=status.HTTP_400_BAD_REQUEST)